// Code generated by mockery v2.43.1. DO NOT EDIT.

package sysstats

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// GetLatest provides a mock function with given fields: ctx
func (_m *MockService) GetLatest(ctx context.Context) (*Stats, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatest")
	}

	var r0 *Stats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Stats, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Stats); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Stats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatsForGraph provides a mock function with given fields: ctx, graph
func (_m *MockService) GetStatsForGraph(ctx context.Context, graph *Graph) ([]Stats, error) {
	ret := _m.Called(ctx, graph)

	if len(ret) == 0 {
		panic("no return value specified for GetStatsForGraph")
	}

	var r0 []Stats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *Graph) ([]Stats, error)); ok {
		return rf(ctx, graph)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Graph) []Stats); ok {
		r0 = rf(ctx, graph)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Stats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Graph) error); ok {
		r1 = rf(ctx, graph)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: ctx
func (_m *MockService) Watch(ctx context.Context) chan struct{} {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 chan struct{}
	if rf, ok := ret.Get(0).(func(context.Context) chan struct{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan struct{})
		}
	}

	return r0
}

// fetchAndRegister provides a mock function with given fields: ctx
func (_m *MockService) fetchAndRegister(ctx context.Context) (*Stats, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for fetchAndRegister")
	}

	var r0 *Stats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Stats, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Stats); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Stats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
